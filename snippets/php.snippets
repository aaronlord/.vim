snippet scaffold:class
	<?php

	declare(strict_types=1);

	namespace ${1:`substitute(substitute(substitute(expand('%:p:h'), getcwd()..'/', '', ''), '/', '\', 'g'), '^.', '\U&', '')`};

	class ${2:`expand('%:t:r')`}
	{
		${0:${VISUAL}}
	}

snippet scaffold:class:context
	<?php

	declare(strict_types=1);

	namespace ${1:`substitute(substitute(substitute(expand('%:p:h'), getcwd()..'/', '', ''), '/', '\', 'g'), '^.', '\U&', '')`};

	use $1\Strategies\\${3:StrategyInterface};

	class ${2:`expand('%:t:r')`}
	{
		public function ${4:determine}(): $3
		{
			${0:${VISUAL}}
		}
	}

snippet scaffold:class:strategy
	<?php

	declare(strict_types=1);

	namespace ${1:`substitute(substitute(substitute(expand('%:p:h'), getcwd()..'/', '', ''), '/', '\', 'g'), '^.', '\U&', '')`};

	class ${4:`expand('%:t:r')`} implements ${3:StrategyInterface}
	{
		public function ${5:execute}(${6})
		{
			${0:${VISUAL}}
		}
	}

snippet scaffold:interface
	<?php

	declare(strict_types=1);

	namespace ${1:`substitute(substitute(substitute(expand('%:p:h'), getcwd()..'/', '', ''), '/', '\', 'g'), '^.', '\U&', '')`};

	interface ${2:`expand('%:t:r')`}
	{
		${0:${VISUAL}}
	}

snippet scaffold:interface:strategy
	<?php

	declare(strict_types=1);

	namespace ${1:`substitute(substitute(substitute(expand('%:p:h'), getcwd()..'/', '', ''), '/', '\', 'g'), '^.', '\U&', '')`};

	interface ${2:`expand('%:t:r')`}
	{
		public function ${3:execute}(${4})
		{
			${0:${VISUAL}}
		}
	}

snippet scaffold:class:test
	<?php

	declare(strict_types=1);

	namespace ${1:`substitute(substitute(substitute(expand('%:p:h'), getcwd()..'/', '', ''), '/', '\', 'g'), '^.', '\U&', '')`};

	use PHPUnit\Framework\TestCase;

	class ${2:`expand('%:t:r')`} extends TestCase
	{
		${0:${VISUAL}}
	}

snippet scaffold:class:laravel-test
	<?php

	declare(strict_types=1);

	namespace ${1:`substitute(substitute(substitute(expand('%:p:h'), getcwd()..'/', '', ''), '/', '\', 'g'), '^.', '\U&', '')`};

	use Tests\TestCase;

	class ${2:`expand('%:t:r')`} extends TestCase
	{
		${0:${VISUAL}}
	}

snippet scaffold:method:test
	public function test_it_${1:does_something}(): void
	{
		${0:${VISUAL}}
	}

snippet scaffold:method:test-with-provider
	/**
	 * @dataProvider $1_data_provider
	 */
	public function test_it_${1:does_something}(${2}): void
	{
		${0:${VISUAL}}
	}

	public static function it_$1_data_provider(): array
	{
		return [
			// 'it_does_something' => []
		];
	}
